// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class MoveVestingScheduleEarlier extends ethereum.Event {
  get params(): MoveVestingScheduleEarlier__Params {
    return new MoveVestingScheduleEarlier__Params(this);
  }
}

export class MoveVestingScheduleEarlier__Params {
  _event: MoveVestingScheduleEarlier;

  constructor(event: MoveVestingScheduleEarlier) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get startTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get duration(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenVested extends ethereum.Event {
  get params(): TokenVested__Params {
    return new TokenVested__Params(this);
  }
}

export class TokenVested__Params {
  _event: TokenVested;

  constructor(event: TokenVested) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get poolId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class VestingScheduleAdded extends ethereum.Event {
  get params(): VestingScheduleAdded__Params {
    return new VestingScheduleAdded__Params(this);
  }
}

export class VestingScheduleAdded__Params {
  _event: VestingScheduleAdded;

  constructor(event: VestingScheduleAdded) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get startTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get step(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class VestingSettingChanged extends ethereum.Event {
  get params(): VestingSettingChanged__Params {
    return new VestingSettingChanged__Params(this);
  }
}

export class VestingSettingChanged__Params {
  _event: VestingSettingChanged;

  constructor(event: VestingSettingChanged) {
    this._event = event;
  }

  get percentageToVestingSchedule(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get claimDuration(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get claimStep(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class VestingStartTimeUpdated extends ethereum.Event {
  get params(): VestingStartTimeUpdated__Params {
    return new VestingStartTimeUpdated__Params(this);
  }
}

export class VestingStartTimeUpdated__Params {
  _event: VestingStartTimeUpdated;

  constructor(event: VestingStartTimeUpdated) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldVestingStartTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newVestingStartTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StakingPoolRewarder__vestingSchedulesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class StakingPoolRewarder extends ethereum.SmartContract {
  static bind(address: Address): StakingPoolRewarder {
    return new StakingPoolRewarder("StakingPoolRewarder", address);
  }

  calculateTotalReward(user: Address, poolId: BigInt): BigInt {
    let result = super.call(
      "calculateTotalReward",
      "calculateTotalReward(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(poolId)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateTotalReward(
    user: Address,
    poolId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateTotalReward",
      "calculateTotalReward(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(poolId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateWithdrawableReward(user: Address, poolId: BigInt): BigInt {
    let result = super.call(
      "calculateWithdrawableReward",
      "calculateWithdrawableReward(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(poolId)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateWithdrawableReward(
    user: Address,
    poolId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateWithdrawableReward",
      "calculateWithdrawableReward(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(poolId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimDuration(): BigInt {
    let result = super.call("claimDuration", "claimDuration():(uint256)", []);

    return result[0].toBigInt();
  }

  try_claimDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimDuration",
      "claimDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimStep(): BigInt {
    let result = super.call("claimStep", "claimStep():(uint256)", []);

    return result[0].toBigInt();
  }

  try_claimStep(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claimStep", "claimStep():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimVestedReward(poolId: BigInt, user: Address): BigInt {
    let result = super.call(
      "claimVestedReward",
      "claimVestedReward(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(user)
      ]
    );

    return result[0].toBigInt();
  }

  try_claimVestedReward(
    poolId: BigInt,
    user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimVestedReward",
      "claimVestedReward(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimableAmounts(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "claimableAmounts",
      "claimableAmounts(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_claimableAmounts(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimableAmounts",
      "claimableAmounts(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  percentageToVestingSchedule(): i32 {
    let result = super.call(
      "percentageToVestingSchedule",
      "percentageToVestingSchedule():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_percentageToVestingSchedule(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "percentageToVestingSchedule",
      "percentageToVestingSchedule():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  rewardDispatcher(): Address {
    let result = super.call(
      "rewardDispatcher",
      "rewardDispatcher():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_rewardDispatcher(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rewardDispatcher",
      "rewardDispatcher():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardToken(): Address {
    let result = super.call("rewardToken", "rewardToken():(address)", []);

    return result[0].toAddress();
  }

  try_rewardToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewardToken", "rewardToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakingPools(): Address {
    let result = super.call("stakingPools", "stakingPools():(address)", []);

    return result[0].toAddress();
  }

  try_stakingPools(): ethereum.CallResult<Address> {
    let result = super.tryCall("stakingPools", "stakingPools():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vestingSchedules(
    param0: Address,
    param1: BigInt
  ): StakingPoolRewarder__vestingSchedulesResult {
    let result = super.call(
      "vestingSchedules",
      "vestingSchedules(address,uint256):(uint128,uint32,uint32,uint32,uint32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new StakingPoolRewarder__vestingSchedulesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_vestingSchedules(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<StakingPoolRewarder__vestingSchedulesResult> {
    let result = super.tryCall(
      "vestingSchedules",
      "vestingSchedules(address,uint256):(uint128,uint32,uint32,uint32,uint32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StakingPoolRewarder__vestingSchedulesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  vestingStartTime(param0: BigInt): BigInt {
    let result = super.call(
      "vestingStartTime",
      "vestingStartTime(uint256):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_vestingStartTime(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vestingStartTime",
      "vestingStartTime(uint256):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class __StakingPoolRewarder_initCall extends ethereum.Call {
  get inputs(): __StakingPoolRewarder_initCall__Inputs {
    return new __StakingPoolRewarder_initCall__Inputs(this);
  }

  get outputs(): __StakingPoolRewarder_initCall__Outputs {
    return new __StakingPoolRewarder_initCall__Outputs(this);
  }
}

export class __StakingPoolRewarder_initCall__Inputs {
  _call: __StakingPoolRewarder_initCall;

  constructor(call: __StakingPoolRewarder_initCall) {
    this._call = call;
  }

  get _stakingPools(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _rewardToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _rewardDispatcher(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _percentageToVestingSchedule(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get _claimDuration(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _claimStep(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class __StakingPoolRewarder_initCall__Outputs {
  _call: __StakingPoolRewarder_initCall;

  constructor(call: __StakingPoolRewarder_initCall) {
    this._call = call;
  }
}

export class ClaimVestedRewardCall extends ethereum.Call {
  get inputs(): ClaimVestedRewardCall__Inputs {
    return new ClaimVestedRewardCall__Inputs(this);
  }

  get outputs(): ClaimVestedRewardCall__Outputs {
    return new ClaimVestedRewardCall__Outputs(this);
  }
}

export class ClaimVestedRewardCall__Inputs {
  _call: ClaimVestedRewardCall;

  constructor(call: ClaimVestedRewardCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ClaimVestedRewardCall__Outputs {
  _call: ClaimVestedRewardCall;

  constructor(call: ClaimVestedRewardCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MoveVestingScheduleEarlierCall extends ethereum.Call {
  get inputs(): MoveVestingScheduleEarlierCall__Inputs {
    return new MoveVestingScheduleEarlierCall__Inputs(this);
  }

  get outputs(): MoveVestingScheduleEarlierCall__Outputs {
    return new MoveVestingScheduleEarlierCall__Outputs(this);
  }
}

export class MoveVestingScheduleEarlierCall__Inputs {
  _call: MoveVestingScheduleEarlierCall;

  constructor(call: MoveVestingScheduleEarlierCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get duration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MoveVestingScheduleEarlierCall__Outputs {
  _call: MoveVestingScheduleEarlierCall;

  constructor(call: MoveVestingScheduleEarlierCall) {
    this._call = call;
  }
}

export class OnRewardCall extends ethereum.Call {
  get inputs(): OnRewardCall__Inputs {
    return new OnRewardCall__Inputs(this);
  }

  get outputs(): OnRewardCall__Outputs {
    return new OnRewardCall__Outputs(this);
  }
}

export class OnRewardCall__Inputs {
  _call: OnRewardCall;

  constructor(call: OnRewardCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get entryTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class OnRewardCall__Outputs {
  _call: OnRewardCall;

  constructor(call: OnRewardCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetRewardDispatcherCall extends ethereum.Call {
  get inputs(): SetRewardDispatcherCall__Inputs {
    return new SetRewardDispatcherCall__Inputs(this);
  }

  get outputs(): SetRewardDispatcherCall__Outputs {
    return new SetRewardDispatcherCall__Outputs(this);
  }
}

export class SetRewardDispatcherCall__Inputs {
  _call: SetRewardDispatcherCall;

  constructor(call: SetRewardDispatcherCall) {
    this._call = call;
  }

  get _rewardDispatcher(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRewardDispatcherCall__Outputs {
  _call: SetRewardDispatcherCall;

  constructor(call: SetRewardDispatcherCall) {
    this._call = call;
  }
}

export class SetRewarderVestingStartTimeCall extends ethereum.Call {
  get inputs(): SetRewarderVestingStartTimeCall__Inputs {
    return new SetRewarderVestingStartTimeCall__Inputs(this);
  }

  get outputs(): SetRewarderVestingStartTimeCall__Outputs {
    return new SetRewarderVestingStartTimeCall__Outputs(this);
  }
}

export class SetRewarderVestingStartTimeCall__Inputs {
  _call: SetRewarderVestingStartTimeCall;

  constructor(call: SetRewarderVestingStartTimeCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _vestingStartTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetRewarderVestingStartTimeCall__Outputs {
  _call: SetRewarderVestingStartTimeCall;

  constructor(call: SetRewarderVestingStartTimeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateVestingSettingCall extends ethereum.Call {
  get inputs(): UpdateVestingSettingCall__Inputs {
    return new UpdateVestingSettingCall__Inputs(this);
  }

  get outputs(): UpdateVestingSettingCall__Outputs {
    return new UpdateVestingSettingCall__Outputs(this);
  }
}

export class UpdateVestingSettingCall__Inputs {
  _call: UpdateVestingSettingCall;

  constructor(call: UpdateVestingSettingCall) {
    this._call = call;
  }

  get _percentageToVestingSchedule(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _claimDuration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _claimStep(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateVestingSettingCall__Outputs {
  _call: UpdateVestingSettingCall;

  constructor(call: UpdateVestingSettingCall) {
    this._call = call;
  }
}
